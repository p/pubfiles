#!/usr/bin/env ruby

require 'erb'
require 'pathname'
require 'tempfile'
require 'optparse'

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: build [-r]"

  opts.on("-r", "--reload", "Reload running openbox") do
    options[:reload] = true
  end
end.parse!

module Helpers
  def src_base
    @src_base ||= Pathname.new(__FILE__).dirname.join('..')
  end

end

class Context
  include Helpers

  def render(template_path)
    content = File.read(template_path)
    template = ERB.new(content)
    template.result(binding)
  end

  def partial(path)
    template_path = src_base.join(path + '.erb')
    render(template_path)
  end
end

class Builder
  include Helpers

  def build
    Dir.mktmpdir do |dir|
      files = %w(rc.xml menu.xml)
      files.each do |file|
        transform_template(file, dir)
      end
      files.each do |file|
        install_file(file, dir)
      end
    end
  end

  def transform_template(basename, dest_dir)
    if File.exist?(template_path = src_base.join(basename + '.erb'))
      result = Context.new.render(template_path)
      File.open(tmp_rc_path = File.join(dest_dir, basename), 'w') do |f|
        f << result
      end
    else
      FileUtils.cp(src_base.join(basename), dest_dir)
    end
  end

  def install_file(basename, tmp_dir)
    FileUtils.mkdir_p(openbox_rc_root)
    FileUtils.cp(File.join(tmp_dir, basename), openbox_rc_root.join(basename))
  end

  def openbox_rc_root
    if path = ENV['XDG_CONFIG_HOME']
    else
      raise "XDG_CONFIG_HOME not set"
    end
    Pathname.new(path).join('openbox')
  end
end

Builder.new.build

if options[:reload]
  output = `openbox --reconfigure`
  if $?.exitstatus != 0
    puts output
    raise "Failed to reconfigure openbox"
  end
end
