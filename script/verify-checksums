#!/usr/bin/env ruby

require 'yaml'
require 'optparse'

class Runner
  def initialize(**opts)
    @options = opts
  end

  attr_reader :options

  def run
    puts 'Reading checksums...'
    checksums = File.open(options.fetch(:path)) do |f|
      YAML.load(f)
    end.fetch('sums')

    all_ref_checksums = {}
    options.fetch(:ref_paths).each do |ref_path|
      puts "Reading reference... #{ref_path}"
      ref_checksums = File.open(ref_path) do |f|
        YAML.load(f)
      end.fetch('sums')
      dups = ref_checksums.keys.select do |key|
        all_ref_checksums.include?(key)
      end
      if dups.any?
        warn "#{dups.length} duplicated paths:\n"
        dups[0..19].each do |dup|
          puts "  #{dup}"
        end
        if dups.length > 20
          puts '  ...'
        end
      end
      all_ref_checksums.update(ref_checksums)
    end

    checksums.each do |path, info|
      if (ref_info = all_ref_checksums[path]) &&
        info.fetch('sha1') == ref_info.fetch('sha1') &&
        info.fetch('size') == ref_info.fetch('size')
      then
        next
      end

      found = false
      bn = File.basename(path)
      all_ref_checksums.each do |ref_path, ref_info|
        if File.basename(ref_path) == bn &&
          ref_info.fetch('size') == info.fetch('size') &&
          ref_info.fetch('sha1') == info.fetch('sha1')
        then
          found = true
          if options[:verbose]
            puts "OK: #{path}"
          end
          break
        end
      end

      next if found

      puts "Missing in reference: #{path}"
    end
  end
end

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: verify-checksums [-r ref-path] path"

  opts.on('-r', '--reference=PATH', 'Reference path') do |v|
    options[:ref_paths] ||= []
    options[:ref_paths] << v
  end

  opts.on('-v', '--verbose', 'Be more verbose') do
    options[:verbose] = true
  end
end.parse!

options.fetch(:ref_paths)

Runner.new(path: ARGV.shift, **options).run
