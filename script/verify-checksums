#!/usr/bin/env ruby

require 'yaml'
require 'optparse'

class Runner
  def initialize(**opts)
    @options = opts
  end

  attr_reader :options
  attr_reader :checksums

  def run
    puts 'Reading checksums...'
    @checksums = File.open(options.fetch(:path)) do |f|
      YAML.load(f)
    end.fetch('sums')

    all_ref_checksums = {}
    options.fetch(:ref_paths).each do |ref_path|
      puts "Reading reference... #{ref_path}"
      ref_checksums = File.open(ref_path) do |f|
        YAML.load(f)
      end.fetch('sums')
      dups = ref_checksums.keys.select do |key|
        all_ref_checksums.include?(key)
      end
      if dups.any?
        warn "#{dups.length} duplicated paths:\n"
        dups[0..19].each do |dup|
          puts "  #{dup}"
        end
        if dups.length > 20
          puts '  ...'
        end
      end
      all_ref_checksums.update(ref_checksums)
    end

    basename_index = {}
    all_ref_checksums.each_key do |ref_path|
      bn = File.basename(ref_path)
      basename_index[bn] ||= []
      basename_index[bn] << ref_path
    end

    with_progress do |bar|
      checksums.each do |path, info|
        begin
          error_in_reference = false

          if ref_info = all_ref_checksums[path]
            if ref_info['error']
              error_in_reference = true
            elsif info.fetch('sha1') == ref_info.fetch('sha1') &&
              info.fetch('size') == ref_info.fetch('size')
            then
              next
            end
          end

          found = false
          bn = File.basename(path)
          candidate_ref_paths = basename_index[bn]
          if candidate_ref_paths && !candidate_ref_paths.empty?
            candidate_ref_paths.each do |ref_path|
              ref_info = all_ref_checksums.fetch(ref_path)
              if File.basename(ref_path) == bn
                if ref_info['error']
                  error_in_reference = true
                elsif ref_info.fetch('size') == info.fetch('size') &&
                  ref_info.fetch('sha1') == info.fetch('sha1')
                then
                  found = true
                  if options[:verbose]
                    puts "OK: #{path}\n  @ #{ref_path}"
                  end
                  break
                end
              end
            end
          end

          next if found

          if error_in_reference
            puts "Error in reference: #{path}"
          else
            puts "Missing in reference: #{path}"
          end
        ensure
          bar&.increment
        end
      end
    end
  end

  def with_progress
    if options[:progress]
      require 'ruby-progressbar'
      bar = ProgressBar.create(total: checksums.length, format: '%c/%C %e %w')
      yield bar
    else
      yield
    end
  end
end

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: verify-checksums [-r ref-path] path"

  opts.on('-r', '--reference=PATH', 'Reference path') do |v|
    options[:ref_paths] ||= []
    options[:ref_paths] << v
  end

  opts.on('-v', '--verbose', 'Be more verbose') do
    options[:verbose] = true
  end

  opts.on('-g', '--progress', 'Show progress') do
    options[:progress] = true
  end
end.parse!

options.fetch(:ref_paths)

Runner.new(path: ARGV.shift, **options).run
