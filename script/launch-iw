#!/usr/bin/env ruby

binary, profile = ARGV

if profile.nil?
  raise "Usage: launch-iw binary proflie"
end

profile_dir = case File.basename(binary)
when 'waterfox'
  '.waterfox'
when 'firefox'
  '.mozilla/firefox'
when 'palemoon'
  '.moonchild productions/pale moon'
else
  raise "Unknown browser #{binary}"
end

catalog_dir = File.join(File.expand_path('~'), profile_dir)

catalog_path = File.join(catalog_dir, 'profiles.ini')
profile_basename = "gen.#{profile}"
profile_path = File.join(catalog_dir, profile_basename)

require 'inifile'
require 'fileutils'
require 'json'
require 'firefox_hash_generator'

if File.exist?(catalog_path)
  ini = IniFile.new(filename: catalog_path, separator: '')
else
  ini = IniFile.new(separator: '')
end

ini['Profile0'] = {
  Name: profile,
  IsRelative: 1,
  Path: profile_basename,
}

FileUtils.mkdir_p(catalog_dir)
ini.write(filename: catalog_path)

FileUtils.mkdir_p(profile_path)

src = File.expand_path(File.join(File.dirname(__FILE__), '../home/mozilla'))

chrome_path = File.join(profile_path, 'chrome')
FileUtils.mkdir_p(chrome_path)
FileUtils.ln_sf(File.join(src, 'userChrome.css'), File.join(chrome_path, 'userChrome.css'))
FileUtils.ln_sf(File.join(src, 'userContent.css'), File.join(chrome_path, 'userContent.css'))
FileUtils.ln_sf(File.join(src, 'user.js'), File.join(profile_path, 'user.js'))
unless File.exist?(File.join(profile_path, 'system'))
  FileUtils.ln_sf(File.join(src, 'system'), File.join(profile_path, 'system'))
end

search = JSON.load(File.read(File.join(src, 'search.json.in')))
hash = FirefoxHashGenerator.generate(:waterfox, profile_basename, 'DuckDuckGo')
search['metaData'] = {
  current: 'DuckDuckGo',
  hash: hash,
}
search = JSON.dump(search)
# https://github.com/dearblue/ruby-extlz4
# https://gist.github.com/Tblue/62ff47bef7f894e92ed5
# https://gist.github.com/kaefer3000/73febe1eec898cd50ce4de1af79a332a
# use lz4jsoncat in lz4json debian package to verify
require 'extlz4'
File.open(File.join(profile_path, 'search.json.mozlz4'), 'wb') do |f|
  f << "mozLz40\0"
  f << [search.length].pack('l<')
  f << LZ4.block_encode(search)
end

exec(binary, '-P', profile)
