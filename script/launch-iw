#!/usr/bin/env ruby

require 'optparse'

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: launch-iw [-c cert] [-u user] binary profile"

  opts.on("-c", "--ca=PATH", "Add a CA certificate to trust store") do |value|
    options[:ca_certs] ||= []
    options[:ca_certs] << value
  end

  opts.on("-u", "--user USER", "Launch as given user") do |v|
    options[:user] = v
  end
end.parse!

binary, profile = ARGV

if profile.nil?
  raise "Usage: launch-iw [-u user] binary profile"
end

require 'etc'

target_user = options[:user] || profile
unless target_user.start_with?('br-')
  target_user = "br-#{target_user}"
end
if Etc.getpwuid(Process.euid).name != target_user
  begin
    Etc.getpwnam(target_user)
  rescue ArgumentError => e
    if e.message =~ /can't find user/
      if options[:user]
        # User was explicitly requested
        raise
      else
        # Ignore
      end
    else
      raise
    end
  else
    puts "Relaunching as #{target_user}"
    auths = `xauth list`.strip.split("\n")
    auths.each do |auth|
      cmd = %w(sudo -u) + [target_user] + %w(env) + ["XAUTHORITY=/home/#{target_user}/.Xauthority"] + %w(xauth add) + auth.split(/\s+/)
      puts "Executing #{cmd.join(' ')}"
      if fork
        Process.wait
      else
        exec(*cmd)
      end
    end
    if certs = options[:ca_certs]
      certs.each do |ca_path|
        ARGV << '-c' << ca_path
      end
    end
    cmd = %w(sudo -u) + [target_user, 'env', "XAUTHORITY=/home/#{target_user}/.Xauthority", File.realpath(File.expand_path($0))] + ARGV
    puts "Executing #{cmd.join(' ')}"
    exec(*cmd)
  end
end

profile_dir = case File.basename(binary)
when 'waterfox'
  if binary =~ /waterfox-classic/
    '.waterfox-classic'
  else
    '.waterfox'
  end
when 'firefox'
  '.mozilla/firefox'
when 'palemoon'
  '.moonchild productions/pale moon'
else
  raise "Unknown browser #{binary}"
end

catalog_dir = File.join(File.expand_path('~'), profile_dir)

catalog_path = File.join(catalog_dir, 'profiles.ini')
profile_basename = "gen.#{profile}"
profile_path = File.join(catalog_dir, profile_basename)

require 'inifile'
require 'fileutils'
require 'json'
require 'firefox_hash_generator'

if File.exist?(catalog_path)
  ini = IniFile.new(filename: catalog_path, separator: '')
else
  ini = IniFile.new(separator: '')
end

ini['Profile0'] = {
  Name: profile,
  IsRelative: 1,
  Path: profile_basename,
}

FileUtils.mkdir_p(catalog_dir)
ini.write(filename: catalog_path)

FileUtils.mkdir_p(profile_path)

src = File.expand_path(File.join(File.dirname(__FILE__), '../home/mozilla'))

chrome_path = File.join(profile_path, 'chrome')
FileUtils.mkdir_p(chrome_path)
FileUtils.ln_sf(File.join(src, 'userChrome.css'), File.join(chrome_path, 'userChrome.css'))
FileUtils.ln_sf(File.join(src, 'userContent.css'), File.join(chrome_path, 'userContent.css'))
FileUtils.ln_sf(File.join(src, 'user.js'), File.join(profile_path, 'user.js'))
unless File.exist?(File.join(profile_path, 'system'))
  FileUtils.ln_sf(File.join(src, 'system'), File.join(profile_path, 'system'))
end

search = JSON.load(File.read(File.join(src, 'search.json.in')))
hash = FirefoxHashGenerator.generate(:waterfox, profile_basename, 'DuckDuckGo')
search['metaData'] = {
  current: 'DuckDuckGo',
  hash: hash,
}
search = JSON.dump(search)
# https://github.com/dearblue/ruby-extlz4
# https://gist.github.com/Tblue/62ff47bef7f894e92ed5
# https://gist.github.com/kaefer3000/73febe1eec898cd50ce4de1af79a332a
# use lz4jsoncat in lz4json debian package to verify
require 'extlz4'
File.open(File.join(profile_path, 'search.json.mozlz4'), 'wb') do |f|
  f << "mozLz40\0"
  f << [search.length].pack('l<')
  f << LZ4.block_encode(search)
end

if certs = options[:ca_certs]
  db_dir = profile_path
  FileUtils.mkdir_p(db_dir)

  unless File.exist?(File.join(db_dir, 'pkcs11.txt'))
    #system("certutil -d dbm:#{db_dir} -N --empty-password")
  end

  certs.each do |ca_path|
    puts "Adding #{ca_path}"
    system("certutil -d dbm:#{db_dir} -A -n '#{File.basename(ca_path)}' -t 'TCu,Cu,Tu' -i '#{ca_path}'")
  end
end

# Waterfox and waterfox classic put profiles in the same place, ugh.
#exec(binary, '-P', profile)
exec(binary, '--profile', '-no-remote', profile_path)
