#!/usr/bin/env python

# Pushes current branch to a contributor's branch on github.
# The current branch must have format pr-123.
# Any arguments to the script are forwarded to git push (e.g., -f).

import urllib2, json, sys, re, subprocess

class BranchLookupError(StandardError): pass
class UnexpectedBranchName(StandardError): pass
class UnexpectedRemoteUrl(StandardError): pass

def get_current_branch():
    output = subprocess.check_output(['git', 'branch'])
    branch = None
    for line in output.split("\n"):
        if line[0] == '*':
            branch = line[1:].strip()
            break
            
    if branch is None:
        raise BranchLookupError, 'Cannot figure out current branch'
        
    return branch

def get_current_pr_num():
    branch = get_current_branch()
    match = re.match(r'pr-(\d+)$', branch)
    if match is None:
        raise UnexpectedBranchName, 'Current branch is not of pr-123 format'

    pr_num = int(match.group(1))
    return pr_num

def get_remote_names():
    output = subprocess.check_output(['git', 'remote', '-v'])
    lines = output.strip().split("\n")
    names = [line.split("\t")[0] for line in lines]
    return names

def get_upstream_remote_name():
    names = get_remote_names()

    if 'upstream' in names:
        name = 'upstream'
    elif 'origin' in names:
        name = 'origin'
    else:
        raise RemoteLookupError, 'Cannot determine the upstream remote'
        
    return name

def get_remote_push_url(remote_name):
    output = subprocess.check_output(['git', 'remote', '-v'])
    lines = output.strip().split("\n")
    
    remote_url = None
    for line in lines:
        name, url, which = re.split(r'\s+', line)
        if name == remote_name:
            if which == '(push)':
                remote_url = url
                break

    if remote_url is None:
        raise RemoteLookupError, 'Cannot find remote %s' % remote_name
        
    return remote_url

def split_github_url(remote_url):
    match = re.match(r'git@github.com:(\w+)/(\w+?)(.git)?$', remote_url)
    if match is None:
        match = re.match(r'https://github.com/(\w+)/(\w+?)(.git)?$', remote_url)
        if match is None:
            raise UnexpectedRemoteUrl, "Weird url: %s" % remote_url
    
    return match.group(1), match.group(2)

def get_pr_info(upstream_owner_name, upstream_repo_name, pr_num):
    api_url = 'https://api.github.com/repos/%s/%s/pulls/%s' % (upstream_owner_name, upstream_repo_name, pr_num)

    c = urllib2.urlopen(api_url).read()
    payload = json.loads(c)

    pr_owner_name = payload['head']['user']['login']
    pr_repo_name = payload['head']['repo']['name']
    pr_branch = payload['head']['ref']
    
    return pr_owner_name, pr_repo_name, pr_branch

branch = get_current_branch()
pr_num = get_current_pr_num()
origin = get_upstream_remote_name()
remote_url = get_remote_push_url(origin)
upstream_owner_name, upstream_repo_name = split_github_url(remote_url)
pr_owner_name, pr_repo_name, pr_branch = get_pr_info(
    upstream_owner_name, upstream_repo_name, pr_num)

if pr_owner_name not in get_remote_names():
    subprocess.check_call(['git', 'remote', 'add', pr_owner_name, 'git@github.com:%s/%s' % (pr_owner_name, pr_repo_name)])

subprocess.check_call(['git', 'push', pr_owner_name, 'HEAD:%s' % pr_branch] + sys.argv[1:])
