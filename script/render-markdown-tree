#!/usr/bin/env ruby

autoload :FileUtils, 'fileutils'
autoload :Find, 'find'
autoload :OptionParser, 'optparse'
require_relative '../lib/ruby/fs_helpers'

class RendererBase
  def render_path(markdown_path)
    render_text(File.read(markdown_path))
  end
end

class RedcarpetRenderer < RendererBase
  def initialize
    require 'redcarpet'
  end

  def render_text(text)
    markdown.render(text)
  end

  def markdown
    @markdown ||= Redcarpet::Markdown.new(Redcarpet::Render::HTML,
      autolink: true, tables: true)
  end
end

class PandocRenderer < RendererBase
  def initialize
  end

  def render_path(markdown_path)
    cmd = ['pandoc', markdown_path]
    rd, wr = IO.pipe
    pid = Process.spawn(*cmd, out: wr)
    wr.close
    output = rd.read
    Process.waitpid(pid)
    output
  end
end

class PostProcessor
  def initialize(**opts)
    require 'nokogiri'
    @options = opts
  end

  attr_reader :options

  def depth
    options[:depth] || 3
  end

  def process(text)
    doc = Nokogiri::HTML(text)
    xpath_expr = 1.upto(depth).map { |i| "self::h#{i}" }.join(' or ')
    headings = doc.xpath("//*[#{xpath_expr}]").map do |h|
      title = h.text.strip
      next if title.empty?
      # All headings should have generated id's
      next unless h.attr('id')
      {element: h, title: title, children: [], level: Integer(h.name[1..])}
    end.compact
    stack = []
    headings.each do |h|
      elt = h.fetch(:element)
      while stack.last && stack.last.fetch(:level) >= h.fetch(:level)
        stack.pop
      end
      if parent = stack.last
        parent_entry = headings.detect do |h|
          h.fetch(:element) == parent.fetch(:element)
        end
        parent_entry[:children] << h
        h[:top_level] = false
      end
      stack << h
    end
    top_headings = headings.select do |h|
      h[:top_level] != false
    end
    toc = make_list(top_headings, doc)
    toc.set_attribute('class', 'toc')
    doc.xpath('//body').first.prepend_child(toc)
    css = Nokogiri::XML::Node.new('link', doc)
    css.set_attribute('rel', 'stylesheet')
    css.set_attribute('href', 'toc.css')
    head = doc.xpath('//head').first
    head.add_child(css)
    if styles = options[:styles]
      styles.each do |style|
        elt = Nokogiri::XML::Node.new('link', doc)
        elt.set_attribute('rel', 'stylesheet')
        elt.set_attribute('href', style)
        head.add_child(elt)
      end
    end
    doc.to_s
  end

  private

  def make_list(headings, doc)
    ul = Nokogiri::XML::Node.new('ul', doc)
    headings.each do |h|
      a = Nokogiri::XML::Node.new('a', doc)
      a.set_attribute('href', '#' + h.fetch(:element).attr(:id))
      a.content = h.fetch(:title)
      node = Nokogiri::XML::Node.new('li', doc)
      node.add_child(a)
      if children = h[:children]
        node.add_child(make_list(children, doc))
      end
      ul.add_child(node)
    end
    ul
  end
end

class Runner
  include FsHelpers

  def initialize(**opts)
    @options = opts
  end

  attr_reader :options

  def root
    options.fetch(:root)
  end

  alias :start_path :root

  def output_root
    options.fetch(:output_path)
  end

  def run
    Find.find(root) do |path|
      next if File.directory?(path)

      if File.extname(path) == '.md'
        render_markdown(path)
      else
        dest = File.join(output_root, relativize(path))
        FileUtils.mkdir_p(File.dirname(dest))
        FileUtils.cp(path, dest)
      end
    end

    File.open(File.join(output_root, 'toc.css'), 'w') do |f|
      f << STYLE
    end
  end

  private

  def render_markdown(path)
    out_path = File.join(output_root, relativize(path).sub(/\.md/, '.html'))
    rendered = renderer.render_path(path)
    rendered = "<!doctype html><html><head><meta charset='utf-8'></head><body>#{rendered}</body></html>"
    rendered = postprocessor.process(rendered)
    FileUtils.mkdir_p(File.dirname(out_path))
    File.open(out_path, 'w') do |f|
      f << rendered
    end
  end

  def renderer_class
    @renderer_class ||= begin
      Object.const_get((options[:renderer] || 'pandoc').sub(/./) { |m| m.upcase } + 'Renderer')
    end
  end

  def renderer
    @renderer ||= renderer_class.new
  end

  def postprocessor
    @postprocessor ||= PostProcessor.new(**options)
  end
end

STYLE = <<-EOT
  .toc { float: right }
EOT

options = {
}
OptionParser.new do |opts|
  opts.banner = "Usage: render-markdown-tree [options]"

  opts.on('-s', '--style PATH', 'Add stylesheet reference') do |v|
    options[:styles] ||= []
    options[:styles] << v
  end

  opts.on('-w', '--write PATH', 'Specify output directory') do |v|
    options[:output_path] = v
  end

end.parse!

path = ARGV.first
if path.nil?
  raise 'Usage'
end

Runner.new(root: path, **options).run
