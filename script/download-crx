#!/usr/bin/env ruby

# CRX downloader
#
# CRX files prepend signatures/metadata to the zip archive.
# See:
# http://www.lyraphase.com/wp/projects/software/about-crx-files/
# http://www.dre.vanderbilt.edu/~schmidt/android/android-4.0/external/chromium/chrome/common/extensions/docs/crx.html
# https://gromnitsky.blogspot.com/2019/04/crx3.html
# http://gromnitsky.blogspot.com/2017/03/bloatware-comes-when-nobodys-lookin.html
# https://en.wikipedia.org/wiki/ZIP_(file_format)

autoload :JSON, 'json'
autoload :Zip, 'zip'
require 'open-uri'

class Downloader
  def initialize(id_or_url)
    case id_or_url
    when %r,\Ahttps://chrome\.google\.com/webstore/detail/([^/]+)/([a-z0-9]+)(?:\?[^?]+)?\z,
      @slug = $1
      @id = $2
    when %r,\Ahttps://chromewebstore\.google\.com/detail/([a-z0-9]+)(?:\?[^?]+)?\z,
      @slug = nil
      @id = $1
    when %r,\A([a-z0-9]+)\z,
      @slug = nil
      @id = $1
    else
      raise ArgumentError, "Bogus id or URL: #{id_or_url}"
    end
  end

  attr_reader :id

  def download_url
    "https://clients2.google.com/service/update2/crx?response=redirect&prodversion=89.0&x=id%3D#{id}%26installsource%3Dondemand%26uc&acceptformat=crx2,crx3"
  end

  def contents
    @contents ||= URI.parse(download_url).open.read.tap do |contents|
      if contents.length == 0
        raise "Received a zero-length archive"
      end
    end
  end

  def zip_contents
    # Not anchored to the beginning of input to ignore garbage before
    # the zip archive.
    @zip_contents ||= if contents =~ /(PK\x03\x04(?:.|\n)+)\z/
      $1
    else
      raise "Weird archive format"
    end
  end

  def extract_contents(path)
    io = StringIO.new(zip_contents)

    Zip::File.open_buffer(io) do |zip_file|
      zip_file.each do |entry|
        if entry.name == path
          if block_given?
            return yield entry.get_input_stream
          else
            return entry.get_input_stream.read
          end
        end
      end
    end

    raise "Not present in archive: #{path}"
  end

  def manifest_data
    @manifest_data ||= begin
      extract_contents('manifest.json') do |io|
        JSON.load(io)
      end
    end
  end

  def name_from_package
    name = manifest_data.fetch('name').gsub(/[^\w]/, '-').gsub(/--+/, '-').sub(/\A-/, '').sub(/-\z/, '')
    if name =~ /\A__MSG_(\w+)__\z/
      key = $1
      en_messages.fetch(key).fetch('message')
    end
  end

  def fs_name_from_package
    name_from_package.gsub(/[^-a-zA-Z0-9]/, '_')
  end

  def en_messages
    @messages_data ||= begin
      extract_contents('_locales/en/messages.json') do |io|
        JSON.load(io)
      end
    end
  end

  def version
    manifest_data.fetch('version')
  end

  def save(local_path)
    File.open(local_path, 'w') do |io|
      io << contents
    end
  end

  def unpack(local_path)
    dir = local_path.sub(/\.crx\z/, '')
    FileUtils.mkdir_p(dir)
    p dir
    Dir.chdir(dir) do
      puts `unzip ../#{File.basename(local_path)}`
      FileUtils.rm_rf('_metadata')
    end
  end
end

if __FILE__ == $0
  require 'optparse'

  options = {}
  OptionParser.new do |opts|
    opts.banner = "Usage: download-crx [-n|--name NAME] [-u|--unpack] url"

    opts.on("-n", "--name NAME", "Rename to NAME") do |v|
      options[:name] = v
    end

    opts.on("-u", "--unpack", "Unpack the extension") do
      options[:unpack] = true
    end
  end.parse!

  url_or_id = ARGV.shift

  if url_or_id.nil?
    raise "Usage: download-crx [-u|--unpack] <url | id>"
  end

  downloader = Downloader.new(url_or_id)
  puts "Downloaded #{downloader.contents.length} bytes"

  local_name = options[:name] || downloader.fs_name_from_package
  local_fn = "#{local_name}-#{downloader.version}.crx"

  puts "Saving to #{local_fn}"
  downloader.save(local_fn)

  if options[:unpack]
    downloader.unpack(local_fn)
  end
end
