#!/usr/bin/env ruby

require 'json'
require 'yaml'

def blkid(device)
  status = `blkid #{device}`
  if status =~ /LABEL="([^"]+)/
    label = $1
  end
  {label: label}
end

disks = (Dir['/dev/sd?'] + Dir['/dev/nvme?n?']).sort
disk_infos = {}
disks.each do |disk|
  pattern = if disk =~ /nvme/
    "#{disk}p?"
  else
    "#{disk}?"
  end
  parts = Dir[pattern].sort
  status = `fdisk -l #{disk}`
  if status.strip.empty?
    disk_infos[disk] = {
      model: '???',
      serial: '???',
      part_infos: {},
    }
  else
    size = "#{status.split(/\s+/)[2]} #{status.split(/\s+/)[3].sub(',', '')}"
    if status =~ /Disk model: ([^\n]+)/
      model = $1
    end
    part_infos = {}
    parts.each do |part|
      status = `fdisk -l #{part}`
      part_size = "#{status.split(/\s+/)[2]} #{status.split(/\s+/)[3].sub(',', '')}"
      part_infos[part] = {size: part_size}
    end
    status = `smartctl -a #{disk}`
    if status =~ /Serial [nN]umber:\s+(\S+)/
      serial = $1
    end
    if status =~ /Device Model:\s+(.+?)\n/
      model = $1
    end
    disk_infos[disk] = {
      parts: parts,
      size: size,
      part_infos: part_infos,
      model: model,
      serial: serial,
    }
  end
  if disk =~ /sd/
    disk_name = File.basename(disk)
    scsi_id = File.basename(File.readlink("/sys/block/#{disk_name}/device"))
    disk_infos[disk].update(
      scsi_id: scsi_id,
    )
  end
end

dms = Dir['/dev/mapper/*'].sort
dm_infos = {}
dms.each do |dm|
  next if File.basename(dm) == 'control'
  dev_num = File.basename(File.readlink(dm))

  info = `lsblk -Jdo TYPE #{dm}`
  info = JSON.parse(info).fetch('blockdevices')[0]
  type = info.fetch('type')
  if type == 'crypt'
    status = `cryptsetup status #{dm}`
    if status =~ /device:\s+(\S+)/
      device = $1
    else
      raise "'cryptsetup status' failed or produced unexpected output for '#{dm}'"
    end
    blkid_status = blkid(dm)
  else
    # TODO
    device = nil
  end

  if device.nil? || device == '(null)'
    warn "warning: dm #{dm} has null device"
    next
  end

  dm_infos[dm] = {
    device: device,
    label: blkid_status[:label],
    device_num: dev_num,
  }
  parent = if device =~ /nvme/
    device[...-2]
  elsif device =~ /\Asd\w\d\z/
    device[...-1]
  elsif device =~ /\Asd\w\z/
    device
  else
    raise NotImplementedError
  end
  m = disk_infos[parent][:part_infos][device] || {}
  m.update(mapper: dm, mapper_label: blkid_status[:label], mapper_device_num: dev_num)
end

disk_infos.each do |disk, di|
  puts
  name = if di[:scsi_id]
    "#{File.basename(disk)} (#{di[:scsi_id]})"
  else
    File.basename(disk)
  end
  puts "#{'%-10s' % name}   #{'%10s' % di[:size]}  #{'%-20s' % di[:model]}      Serial: #{di[:serial]}"
  di[:part_infos].each do |part, pi|
    blkid_status = blkid(part)

    final_part = pi[:mapper] || part
    status = `df -h #{final_part}`.split("\n")[1]
    fs, size, used, avail, perc, mounted = status.split(/\s+/)
    if fs == 'udev'
      fs, size, used, avail, perc, mounted = nil
    end
    mapper_info = if pi[:mapper]
      label = if blkid_status[:mapper_label]
        " label=#{pi[:mapper_label]}"
      else
        ''
      end
      " via #{'%-21s' % File.basename(pi[:mapper])} #{label}(#{pi[:mapper_device_num]})"
    else
      ' ' * 33
    end
    mount_info = if fs
      " -> #{'%-20s' % mounted} #{'%4s' % perc} used"
    else
      ''
    end
    label = if blkid_status[:label]
      " [#{blkid_status[:label]}]"
    else
      ''
    end
    puts "  #{'%-10s' % File.basename(part)} #{'%10s' % pi[:size]} #{label}#{mapper_info}#{mount_info}"
  end
end
puts

#puts disk_infos.to_yaml
