#!/usr/bin/env ruby

require 'ruby-progressbar'
require 'yaml'
require 'digest/sha1'
require 'find'
require 'optparse'
require_relative '../lib/ruby/fs_helpers'

class Runner
  include FsHelpers

  def initialize(**opts)
    @options = opts
    @sums = {}
  end

  attr_reader :options
  attr_reader :sums

  def start_path
    @start_path ||= begin
      options.fetch(:start_path).tap do |path|
        path.sub(%r,/*\z,, '').sub(/\A\z/, '/')
      end
    end
  end

  def run
    count = 0
    Find.find(start_path) do |path|
      next unless File.file?(path)
      count += 1
    end

    bar = ProgressBar.create(total: count, format: '%c/%C %e %w')

    Find.find(start_path) do |path|
      next unless File.file?(path)

      rel_path = relativize(path)
      checksum = checksum(path)

      sums[rel_path] = {
        sha1: checksum,
        size: File.stat(path).size,
      }

      bar.increment
    end

    @sums = Hash[sums.keys.sort.map do |k|
      [k, sums[k].transform_keys(&:to_s)]
    end]

    payload = {
      'sums' => sums,
    }

    puts 'Writing...'

    File.open(options.fetch(:out_path), 'w') do |f|
      f << YAML.dump(payload)
    end
  end

  def checksum(path)
    digest = Digest::SHA1.new
    File.open(path) do |f|
      while chunk = f.read(1024*1024)
        digest.update(chunk)
      end
    end
    digest.hexdigest
  end
end

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: checksum-dir [-w out-path] [dir]"

  opts.on("-w", "--write=PATH", "Specify output file") do |v|
    options[:out_path] = v
  end
end.parse!

Runner.new(start_path: ARGV.shift || '', **options).run
