#!/usr/bin/env ruby

autoload :Benchmark, 'benchmark'
autoload :FileUtils, 'fileutils'
require 'ruby-progressbar'
require 'yaml'
require 'digest/sha1'
require 'find'
require 'optparse'
require_relative '../lib/ruby/fs_helpers'
require_relative '../lib/ruby/global_helpers'

class Runner
  include FsHelpers
  include GlobalHelpers

  MIN_WRITE_INTERVAL = 4 * 60
  MIN_WRITE_FACTOR = 10

  def initialize(**opts)
    @options = opts
    @sums = {}
    @error_count = 0
    @anything_summed = false
  end

  attr_reader :options
  attr_reader :sums
  attr_reader :next_write
  attr_reader :error_count

  def out_path
    options.fetch(:out_path)
  end

  def resume?
    options[:resume]
  end

  def subdirs
    options[:subdirs]
  end

  def start_path
    @start_path ||= begin
      options.fetch(:start_path).tap do |path|
        path.sub(%r,/*\z,, '').sub(/\A\z/, '/')
      end
    end
  end

  def run
    if resume?
      if File.stat(out_path).size > 5000000
        puts 'Reading snapshot...'
      end
      File.open(out_path) do |f|
        @sums = YAML.load(f).fetch('sums')
      end
    end

    count = 0
    STDOUT << 'Reading directory tree: '
    Find.find(start_path) do |path|
      rel_path = relativize(path)

      maybe_prune(rel_path)

      next unless File.file?(path)

      count += 1

      if count % 1000 == 0
        STDOUT << '.'
      end
    end
    puts ' done.'

    bar = ProgressBar.create(total: count, format: '%c/%C %e %w')

    # Next write time initialization should be here because reading the
    # snapshot could take a long time, and scanning the tree can also take
    # some time.
    @next_write = monotime + MIN_WRITE_INTERVAL

    Find.find(start_path) do |path|
      rel_path = relativize(path)

      maybe_prune(rel_path)

      next unless File.file?(path)

      if resume? && sums.key?(rel_path)
        bar.increment
        next
      end

      begin
        checksum = checksum(path)

        sums[rel_path] = {
          sha1: checksum,
          size: File.stat(path).size,
        }
        @anything_summed = true
      rescue IOError, SystemCallError => exc
        STDERR.puts "Error checksumming #{path}: #{exc.class}: #{exc}"
        @error_count += 1

        sums[rel_path] = {
          error: "#{exc.class}: #{exc}",
          size: File.stat(path).size,
        }
      end

      bar.increment
      maybe_write_payload
    end

    if @anything_summed
      write_payload
    else
      puts "Nothing was summed"
    end

    if error_count > 0
      puts "#{error_count} errors encountered while checksumming"
      exit 1
    end

  end

  def maybe_write_payload
    if (now = monotime) > next_write
      write_time = Benchmark.realtime do
        write_payload
      end
      @next_write = monotime + [MIN_WRITE_INTERVAL, write_time * MIN_WRITE_FACTOR].max
    end
  end

  def write_payload
    @sums = Hash[sums.keys.sort.map do |k|
      [k, sums[k].transform_keys(&:to_s)]
    end]

    payload = {
      'sums' => sums,
    }

    puts 'Writing...'

    File.open(out_path + '.part', 'w') do |f|
      f << YAML.dump(payload)
    end
    FileUtils.mv(out_path + '.part', out_path)
  end

  def checksum(path)
    digest = Digest::SHA1.new
    File.open(path) do |f|
      while chunk = f.read(1024*1024)
        digest.update(chunk)
      end
    end
    digest.hexdigest
  end

  def maybe_prune(rel_path)
    if subdirs
      top_comp = rel_path.sub(%r,/.*,, '')
      if !top_comp.empty? && !subdirs.include?(top_comp)
        Find.prune
      end
    end
  end
end

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: checksum-dir [-w out-path] [dir]"

  opts.on('-r', '--resume', 'Resume previous operation') do
    options[:resume] = true
  end

  opts.on("-s", "--subdir=DIR", "Checksum only specified subdir (may be repeated)") do |v|
    options[:subdirs] ||= []
    options[:subdirs] << v
  end

  opts.on("-w", "--write=PATH", "Specify output file") do |v|
    options[:out_path] = v
  end
end.parse!

options.fetch(:out_path)

Runner.new(start_path: ARGV.shift || '', **options).run
