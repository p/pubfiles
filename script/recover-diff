#!/usr/bin/env ruby

require 'find'
require 'optparse'
require_relative '../lib/ruby/fs_helpers'

class Runner
  include FsHelpers

  def initialize(**opts)
    @options = opts
    @zero_size = []
    @zeroes_only = []
    @mixed = []
    @dead = []
  end

  attr_reader :options

  def check_bad_file(path, reference: false)
    ok = true

    if File.stat(path).size == 0
      puts "Zero size: #{path}"
      @zero_size << path
      ok = false
    end

    if File.read(path).force_encoding('binary') =~ Regexp.new('\A\x00+\z'.force_encoding('binary'), Regexp::FIXEDENCODING)
      puts "File comprised of all zero bytes: #{path}"
      @zeroes_only << path
      ok = false
    end

    ok
  end

  def run
    root_path = ARGV.shift || '.'
    ref_root_path = options.fetch(:reference_path)

    Find.find(root_path) do |path|
      next if File.directory?(path)

      rel_path = FsHelpers.relativize(root_path, path)
      ref_path = FsHelpers.absolutize(ref_root_path, rel_path)

      unless File.exist?(ref_path)
        puts "Reference missing: #{path}"
        check_bad_file(path)
        next
      end

      unless files_same_contents?(path, ref_path)
        puts "Files differ: #{path}"
        ok = []
        ok << check_bad_file(path)
        ok << check_bad_file(ref_path, reference: true)
        if ok.uniq.length == 2
          puts "MIXED: #{path}"
          @mixed << path
        elsif ok.uniq == [false]
          @dead << path
          @dead << ref_path
        end
      end
    end

    puts
    puts 'Zero size paths:'
    puts
    @zero_size.each do |path|
      puts path
    end

    puts
    puts 'Contents of zeroes only:'
    puts
    @zeroes_only.each do |path|
      puts path
    end

    puts
    puts 'Mixed:'
    puts
    @mixed.each do |path|
      puts path
    end

    puts
    puts 'Dead:'
    puts
    @dead.each do |path|
      puts path
    end
  end
end

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: recover-diff -r reference [path]"

  opts.on("-r", "--reference=PATH", "Specify reference path") do |v|
    options[:reference_path] = v
  end
end.parse!

Runner.new(**options).run
