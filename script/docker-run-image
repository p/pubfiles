#!/usr/bin/env ruby

# Port forwarding docs: https://github.com/moby/moby/issues/2785

require 'optparse'

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: docker-run-image [options] image-name container-port host-port [host-bind-ip]"

  opts.on("-e", "--env FOO=BAR", "Set environment variable") do |v|
    options[:env] ||= []
    options[:env] << v
  end
end.parse!

image_name, container_port, host_port, host_bind_ip = ARGV

unless host_port
  raise "Usage: docker-run-image image-name container-port host-port [host-bind-ip]"
end

# gem install docker-api
require 'docker'
require 'yaml'
require 'base64'

Docker.validate_version!

config = YAML.load(File.read(File.expand_path('~/.docker/config.json')))
auth = config['auths']['https://index.docker.io/v1/']['auth']
username, password = Base64.decode64(auth).split(':')

Docker.authenticate!(username: username, password: password)

image = Docker::Image.create(fromImage: image_name)
puts "#{image_name} => #{image.id}"

containers = Docker::Container.all(all: true)
container = containers.detect do |c|
  c.info['ImageID'] == image.id
end

if container.nil?
  config = {
    Image: image_name,
    Env: options[:env],
  }
  puts "Creating container with config: #{config}"
  container = Docker::Container.create(config)
end

container = Docker::Container.get(container.id)

#container.delete(force: true)

status = container.info['State']['Status']
if status == 'running'
  puts "Container #{container.id} for #{image_name} is already running"
else
  puts "Starting container for #{image_name}"
  spec = {HostPort: host_port.to_s}
  if host_bind_ip
    spec[:HostIp] = host_bind_ip
  else
    spec[:HostIp] = '127.0.0.1'
  end
  config = {
    PortBindings: {
      "#{container_port}/tcp" => [spec],
    },
  }
  puts config
  container.start!(config)
end

if false
require 'byebug'
byebug
1
end

container = Docker::Container.get(container.id)
status = container.info['State']['Status']
if status != 'running'
  raise "Bad status #{status} for container #{container.id}"
end

#p image
