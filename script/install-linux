#!/bin/sh

set -e

if test "`id -u`" != 0; then
  if which sudo 2>/dev/null 1>&2; then
    echo "This needs to be run as root, trying sudo" 1>&2
    exec sudo sh -x "$0" "$@"
  else
    echo "This needs to be run as root" 1>&2
    exit 2
  fi
fi

echo 'Recognized /etc/setup.conf parameters:'
echo
echo 'release=testing | stable - which release to use'
echo 'headful=true | false'
echo 'mm=true | false'
echo 'tmp_zram=<size>'
echo 'br_zram=<size>'
echo 'main_user=<username>'
echo 'br_users="<username> <username> ..."'
echo 'wireless=true | false'
echo

if test -f /etc/setup.conf; then
  echo 'Current /etc/setup.conf contents:'
  echo
  cat /etc/setup.conf
  echo
fi

. /etc/setup.conf

if echo "$0" |grep -q /; then
  BASE=`dirname "$0"`
else
  echo "Cannot determine base directory" 1>&2
  exit 2
fi

. $BASE/common.sh

install_sources() {
  sources_list_src="$1"
  sources_list_dest=/etc/apt/sources.list
  if ! test -e $sources_list_dest; then
    install -m 644 $sources_list_src $sources_list_dest
    apt-get update
  elif ! diff -q $sources_list_src /etc/apt/sources.list; then
    backup_path=$sources_list_dest.`date +%Y%m%d`
    if test -e $backup_path; then
      echo $backup_path already exists, aborting 1>&2
      exit 2
    fi
    mv /etc/apt/sources.list $backup_path
    install -m 644 $sources_list_src $sources_list_dest
    apt-get update
    apt-get upgrade
    apt-get dist-upgrade
  fi
}

if test -f /etc/setup.conf; then
  release=`cat /etc/setup.conf |grep ^release= |awk -F= '{print $2}'`
fi
if test -z "$release"; then
  release=testing
fi

echo Installing for:
echo Devuan: `is_devuan; yesno $?`
echo Release: $release
echo Headful: `is_headful; yesno $?`
echo Multimedia: `install_mm; yesno $?`
echo Wireless: `yesnoauto $wireless`

echo Press any key to continue
read a

if is_devuan; then
 install_sources $BASE/../config/apt/devuan/$release/sources.list
elif is_debian && ! is_ubuntu; then
 install_sources $BASE/../config/apt/debian/$release/sources.list
fi

apt-get remove tasksel popularity-contest

apt-get install -y python3-pip || apt-get install -y python-pip

if ! is_aws; then
  install_if_needed smartmontools
fi

install_if_needed \
  console-setup console-setup-linux openntpd openssh-server \
  zsh sudo man-db dnsutils \
  git curl wget make gcc \
  zip unzip net-tools rsync tmux python-is-python3 zstd

# libglib2.0-bin: gsettings (for disabling recent files)

# chromium is no longer here - use ungoogled-chromium
if is_headful; then
  install_if_needed \
    gitk libvte9 feh \
    evince gimp \
    xinit xauth openbox xsecurelock xss-lock \
    x11-xserver-utils x11-utils xserver-xorg \
    xfonts-terminus libnss3-tools libglib2.0-bin

  if ! is_ubuntu; then
    # Does not exist in ubuntu 20.04
    install_if_needed xpdf
  fi

  # Do not need:
  # xserver-xorg-input-evdev xserver-xorg-input-kbd xserver-xorg-input-mouse

  if ! dpkg -L scite >/dev/null 2>&1; then
    install_if_needed scite
  fi

  if install_mm; then
    install_if_needed mpv alsa-utils youtube-dl
    # mplayer does not always exist
    install_if_needed mplayer || true
  fi

  if is_ubuntu; then
    install_if_needed firefox
  else
    install_if_needed firefox-esr
  fi
fi

# USB wifi dongles need firmware
if ! is_ubuntu; then
  # Does not exist in ubuntu 20.04
  install_if_needed firmware-realtek
fi

need_wireless=false
skip_wireless=false
if test -n "$wireless"; then
  if $wireless; then
    need_wireless=true
  else
    skip_wireless=true
  fi
fi
if ! $skip_wireless && lspci -v|grep -q iwlwifi && ! is_ubuntu; then
  install_if_needed firmware-iwlwifi
  need_wireless=true
fi

if lspci |grep -q Radeon; then
  install_if_needed firmware-amd-graphics
fi

# This should only be done on scratch machines.
#echo '%sudo ALL=(ALL:ALL) NOPASSWD:ALL' > /etc/sudoers.d/sudo-group
#chmod 0400 /etc/sudoers.d/sudo-group

install_if_needed nvi
apt-get remove vim-common nano
update-alternatives --set editor /usr/bin/nvi
update-alternatives --set vi /usr/bin/nvi

chsh -s /bin/zsh root
if test "`id -u`" = 0 && test -n "$SUDO_USER"; then
  user=$SUDO_USER
elif test "`id -u`" != 0; then
  chsh -s /bin/zsh `id -un`
fi

if have_user bootstrap; then
  chsh -s /bin/zsh bootstrap
fi

if have_user me; then
  chsh -s /bin/zsh me
  usermod -a -G sudo me
fi

if have_user w; then
  chsh -s /bin/zsh w
fi

install_if_needed hdparm lm-sensors sysstat iotop usbutils pciutils ethtool

if ! grep -q '^apm = 255' /etc/hdparm.conf; then
  sed -i -e s/'^apm =/#apm =/' /etc/hdparm.conf
  echo apm = 255 |tee -a /etc/hdparm.conf
fi

# This contains the scripts needed for machine to turn off when
# the power button is pressed.
# Laptops apparently don't need this package - power button must be handled
# differently on them.
if ! is_laptop; then
  install_if_needed acpi-support
fi

if ! $skip_wireless && (is_laptop || lspci |grep -q Wireless || $need_wireless); then
  install_if_needed wireless-tools rfkill iw wpasupplicant wireless-regdb
fi

if is_laptop; then
  install_if_needed \
    acpi pm-utils nfs-common

  if ! $skip_wireless && lspci |grep -q 'Intel.*PRO/Wireless.*AGN'; then
    install_if_needed firmware-iwlwifi
  fi

  $BASE/configure-hdparm
fi

if true; then
  apt-get remove needrestart
else
  if false; then
    # Disable shared library warnings on current devuan
    # https://unix.stackexchange.com/questions/522459/how-can-i-get-these-dialogs-informing-me-that-i-need-to-restart-to-stop-popping
    if test -f /etc/needrestart/notify.conf; then
      echo "NR_NOTIFYD_DISABLE_NOTIFY_SEND='1'" |tee -a /etc/needrestart/notify.conf
    fi
  fi

  for f in 200-write 400-notify-send; do
    if test -f /etc/needrestart/notify.d/$f; then
      chmod -x /etc/needrestart/notify.d/$f
    fi
  done
fi

# disable beep
# https://linuxconfig.org/turn-off-beep-bell-on-linux-terminal
echo 'blacklist pcspkr' >> /etc/modprobe.d/blacklist.conf

if is_laptop; then
  $BASE/disable-lid-suspend
fi

if test -f /usr/bin/gtkterm2; then
  update-alternatives --set x-terminal-emulator /usr/bin/gtkterm2
fi

$BASE/configure-password-delay
$BASE/configure-service-restart

mkdir -p /etc/sudoers.d
for f in $BASE/../config/sudoers.d/*; do
  install -m 400 "$f" /etc/sudoers.d
done

for f in "$BASE"/../config/boot.d/*; do
  mkdir -p /etc/boot.d
  install -m 550 -o root -g root "$f" /etc/boot.d/"$(basename "$f")"
done

install -m 444 -o root -g root "$BASE"/../config/ssh/ssh_config.d/known_hosts.conf /etc/ssh/ssh_config.d/known_hosts.conf

# https://www.tecmint.com/set-system-locales-in-linux/
if have update-locale; then
  update-locale LC_ALL=C.UTF-8
fi
if false && have localectl; then
  localectl set-locale LANG=C.UTF-8
fi

if is_laptop; then
  # https://wiki.archlinux.org/index.php/Fan_speed_control
  modprobe thinkpad_acpi fan_control=1
  if test -f /sys/devices/platform/thinkpad_acpi/rfkill; then
    echo options thinkpad_acpi fan_control=1 |tee /etc/modprobe.d/thinkpad_acpi.conf
  fi
fi

if ! id marker >/dev/null 2>&1; then
  useradd -s "`which nologin`" -u 3000 marker
fi

tee /etc/default/grub.d/text-mode.cgf <<-EOT
GRUB_TERMINAL=console
EOT

$BASE/restore-netif-names

# https://unix.stackexchange.com/questions/390184/dmesg-read-kernel-buffer-failed-permission-denied
echo 'kernel.dmesg_restrict = 0' |tee /etc/sysctl.d/dmesg_permit.conf

# sensors
# echo level 4 > /proc/acpi/ibm/fan

# See also:
# https://unix.stackexchange.com/questions/536043/fan-constantly-running-at-full-speed
# https://github.com/vmatare/thinkfan/
# https://askubuntu.com/questions/1166057/fan-constantly-running-at-full-speed
# https://bbs.archlinux.org/viewtopic.php?id=122412

openntpd -ss

if test -f /etc/setup.conf; then
  value=`egrep '^[[:space:]]*tmp_zram=' /etc/setup.conf |awk -F = '{print $2}' |sed -Ee 's/[[:space:]]*#.*//'`
  if test -n "$value"; then
    cat $BASE/../config/boot.d.template/tmp-zram |sed -Ee "s,^SIZE=.*,SIZE=$value," |tee /etc/boot.d/tmp-zram
    chmod +x /etc/boot.d/tmp-zram
  fi
fi

if dmidecode -t system |grep -q 'ThinkPad T550'; then
  echo 'pm_suspend_args=--quirk-dpms-on' |tee -a /etc/system.conf
fi

if install_mm; then
  mkdir -p /etc/mplayer
  install -m 444 -t /etc/mplayer $BASE/../config/mplayer/mplayer.conf
  install -m 444 -t /etc/mplayer $BASE/../config/mplayer/input.conf
fi

$BASE/generate-setup-key

cat <<-EOT |tee /etc/gitattributes
*.[jJ][pP][gG] -delta
*.[jJ][pP][eE][gG] -delta
*.[pP][nN][gG] -delta
*.[mM][oO][vV] -delta
*.[mM][pP]4 -delta
*.[zZ][iI][pP] -delta
*.[gG][zZ] -delta
EOT

echo 'Run sensors-detect if you haven'"'"'t to load kernel modules for hardware sersors.'

if test -d /opt/pubfiles; then
  install -m 555 -t /etc/boot.d -o root -g root $BASE/boot-as-configured
fi

if test -n "$br_users"; then
  for user in $br_users; do
    if ! echo $user |grep -q ^br-; then
      user=br-$user
    fi
    $BASE/setup-$user
  done
fi

if is_headful; then
  for u in me w; do
    if id $u; then
      su - $u -c 'gsettings set org.gnome.desktop.privacy remember-recent-files false'
    fi
  done
fi
