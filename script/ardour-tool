#!/usr/bin/env ruby

autoload :Nokogiri, 'nokogiri'
autoload :Find, 'find'
autoload :FileUtils, 'fileutils'
autoload :OptionParser, 'optparse'
require_relative '../lib/ruby/fs_helpers'

class Runner
  include FsHelpers

  def run
    action = ARGV.shift
    public_send(action.gsub('-', '_'))
  end

  def rename
    src = ARGV.shift
    dest = ARGV.shift
    unless dest
      raise "Usage: ardour-tool rename src dest"
    end

    if src.include?('/')
      raise 'Source cannot be a path, yet'
    end

    FileUtils.mv(src, dest)
    entries_in_path(dest).each do |entry|
      if entry.start_with?(src)
        new_name = dest + entry[src.length..]
        FileUtils.mv(File.join(dest, entry), File.join(dest, new_name))
      end
    end

    do_set_session_name(dest, dest)
  end

  def cp
    src = ARGV.shift
    dest = ARGV.shift
    unless dest
      raise "Usage: ardour-tool cp src dest"
    end

    src_bn = File.basename(src)

    FileUtils.cp_r(src, dest)
    entries_in_path(dest).each do |entry|
      if entry.start_with?(src_bn)
        new_name = File.basename(dest) + entry[src_bn.length..]
        FileUtils.mv(File.join(dest, entry), File.join(dest, new_name))
      end
    end

    do_set_session_name(dest)

    do_symlink_export(dest, replace: true)
  end

  def set_session_name
    path = ARGV.shift
    unless path
      raise "Usage: ardour-tool set-session-name path"
    end

    if path.include?('/')
      raise 'Source cannot be a path, yet'
    end

    do_set_session_name(path)
  end

  private def do_set_session_name(path)
    entries_in_path(path).each do |entry|
      if File.extname(entry) == '.ardour'
        require 'nokogiri'
        entry_path = File.join(path, entry)
        doc = read_xml(entry_path)
        found = false
        doc.xpath('/Session').each do |elt|
          elt.set_attribute('name', path)
          found = true
          break
        end
        unless found
          raise 'Did not find the Session tag'
        end
        write_xml(doc, entry_path)
        return
      end
    end
    puts "No ardour project file found"
  end

  def symlink_exports
    Find.find('.') do |path|
      if path.end_with?('.ardour')
        dir = File.dirname(path)
        do_symlink_export(dir)
      end
    end
  end

  private def do_symlink_export(dir, replace: false)
    export_dir = File.join(dir, 'export')
    if File.symlink?(export_dir)
      if replace
        FileUtils.rm(export_dir)
        make_export_symlink(dir, export_dir)
      else
        return
      end
    elsif File.exist?(export_dir)
      if File.directory?(export_dir)
        if entries_in_path(export_dir).empty?
          FileUtils.rmdir(export_dir)
          make_export_symlink(dir, export_dir)
        else
          puts "#{export_dir}: not empty"
        end
      end
    else
      make_export_symlink(dir, export_dir)
    end
  end

  private def make_export_symlink(dir, export_dir)
    rel_path = FsHelpers.relativize('/home/ardour/projects', File.realpath(dir))
    dest = File.join('/home/ardour/mixes', rel_path)
    FileUtils.mkdir_p(dest)
    dest_rel = relativize_symlink_target(
      File.absolute_path(dest), File.absolute_path(export_dir))
    puts "Symlink #{export_dir} -> #{dest_rel}"
    FileUtils.ln_s(dest_rel, export_dir)
  end

  def cleanup
    project_path = ARGV.shift or raise "Usage: ardour-tool rename-channels path-to-project"
    project_file_path = project_file_path(project_path)
    doc = read_xml(project_file_path)

    doc.xpath('//Source').each do |node|
      path = node.attr('origin')
      if path && !File.exist?(path)
        puts "rm #{path}"
        node.remove
      end
    end

    write_xml(doc, project_file_path)
  end

  def rename_channels
    project_path = ARGV.shift or raise "Usage: ardour-tool rename-channels path-to-project"
    project_file_path = project_file_path(project_path)
    doc = read_xml(project_file_path)
  end

  private def project_file_path(project_path)
    if project_path.end_with?('.ardour')
      return project_path
    end
    entries = entries_in_path(project_path).select do |entry|
      entry.end_with?('.ardour')
    end
    if entries.count != 1
      raise "Unclear which project file to open"
    end
    File.join(project_path, entries.first)
  end

  private def read_xml(path)
    File.open(path) do |f|
      Nokogiri::XML(f)
    end
  end

  private def write_xml(doc, path)
    # TODO write to temp file then move
    File.open(path, 'w') do |f|
      f << doc.to_s
    end
  end
end

Runner.new.run
