#!/usr/bin/env ruby

require 'optparse'
require 'mongo'

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: mongodb-create-admin-user [options]"

  opts.on("-u", "--user=USER", "User name (default: admin)") do |v|
    options[:user] = v
  end
  opts.on("-p", "--password=PASSWORD", "Password") do |v|
    options[:password] = v
  end

  opts.on("-l", "--list-users", "List existing users") do
    options[:list_users] = true
  end

  opts.on("-d", "--database=DATABASE", "Database to list or delete users in (default: admin)") do |v|
    options[:database] = v
  end

  opts.on("-D", "--delete-users", "Delete existing users") do
    options[:delete_users] = true
  end
end.parse!

class Runner
  def initialize(**opts)
    @options = opts
  end

  attr_reader :options

  def run
    if options[:list_users]
      db = specified_client.use(options[:database] || 'admin')
      users = db.command(usersInfo: 1).first.fetch('users')
      if users.empty?
        puts "There are no users defined"
      else
        pp users
      end
    elsif options[:delete_users]
      db = specified_client.use(options[:database] || 'admin')
      db.command(usersInfo: 1).first.fetch('users').each do |spec|
        db.users.remove(spec.fetch('user'), database: spec.fetch('db'))
      end
    else
      create_admin_user
    end
  end

  def create_admin_user
    raise "Usage: #{$0} username password" unless password

    client = authenticated_client

    begin
      client.command(ping: 1)
    rescue Mongo::Auth::Unauthorized => exc
      if exc.message !~ /AuthenticationFailed/
        raise
      end

      # Continue with adding the user
    else
      puts "User #{username} appears to already exist with the specified password - doing nothing"
      return
    end

    client.close

    client = authless_client

    begin
      client.use('admin').database.users.create(
          username,
          password: password,
          roles: [
            { role: "userAdminAnyDatabase", db: "admin" },
            { role: "readWriteAnyDatabase", db: "admin" },
          ],
      )
    rescue Mongo::Error => exc
      if exc.message =~ /User.*already exists/
        STDERR.puts "User #{username} appears to already exist but with a different password"
        exit 1
      end

      raise
    end

    puts "User #{username} created successfully"
  end

  private

  def authless_client
    @authless_client ||= Mongo::Client.new(%w'localhost', user: nil)
  end

  def specified_client
    # Do not default user here
    @specified_client ||= Mongo::Client.new(%w'localhost',
      user: options[:user], password: options[:password])
  end

  def authenticated_client
    client = Mongo::Client.new(%w'localhost',
      user: username, password: password)
  end

  def username
    options[:user] || 'admin'
  end

  def password
    options[:password]
  end
end

Runner.new(**options).run
