#!/usr/bin/env python

import sys, subprocess, os.path, os

pr_num = int(sys.argv[1])

def checkout_via_hub(hub_path=None):
    if hub_path is None:
        hub_path = 'hub'
    subprocess.check_call([hub_path, 'pr', 'checkout', str(pr_num), 'pr-%d' % pr_num])

for d in os.environ['PATH'].split(':'):
    hub_path = os.path.join(d, 'hub')
    if os.path.exists(hub_path):
        checkout_via_hub(hub_path)
        exit()

sys.path[0:0] = [os.path.join(os.path.dirname(__file__), '../lib/python')]

import github

origin = github.get_upstream_remote_name()
remote_url = github.get_remote_fetch_url(origin)
upstream_owner_name, upstream_repo_name = github.split_github_url(remote_url)
pr_owner_name, pr_repo_name, pr_branch = github.get_pr_info(
    upstream_owner_name, upstream_repo_name, pr_num)

if pr_owner_name not in github.get_remote_names():
    subprocess.check_call(['git', 'remote', 'add', pr_owner_name, 'https://github.com/%s/%s' % (pr_owner_name, pr_repo_name)])
    subprocess.check_call(['git', 'remote', 'set-url', '--push', pr_owner_name, 'git@github.com:%s/%s' % (pr_owner_name, pr_repo_name)])

subprocess.check_call(['git', 'fetch', pr_owner_name])

subprocess.check_call(['git', 'checkout', 'master'])
#import pdb;pdb.set_trace()
subprocess.check_call(['git', 'checkout', '-b', 'pr-%d' % pr_num,
    '--track', '%s/%s' % (pr_owner_name, pr_branch)])
